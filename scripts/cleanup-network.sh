#!/bin/bash

# üßπ Script de Nettoyage: R√©seau Docker kesimarket-net
# Nettoie et recr√©e le r√©seau partag√© en cas de probl√®me

set -e

NETWORK_NAME="kesimarket-net"

echo "üßπ Nettoyage du r√©seau Docker partag√©..."
echo "R√©seau cible: $NETWORK_NAME"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour v√©rifier l'acc√®s Docker
check_docker_access() {
    if docker ps &> /dev/null; then
        return 0
    else
        return 1
    fi
}

# D√©terminer si on a besoin de sudo
USE_SUDO=""
if ! check_docker_access; then
    echo -e "${YELLOW}‚ö†Ô∏è  Docker requires sudo privileges${NC}"
    USE_SUDO="sudo "
    
    # Test sudo access
    if ! ${USE_SUDO}docker ps &> /dev/null; then
        echo -e "${RED}‚ùå Cannot access Docker even with sudo${NC}"
        exit 1
    fi
else
    echo -e "${GREEN}‚úÖ Docker is accessible without sudo${NC}"
fi

echo ""
echo -e "${BLUE}üìã √âtat actuel des r√©seaux Docker:${NC}"
${USE_SUDO}docker network ls

echo ""
echo -e "${BLUE}üîç V√©rification du r√©seau '$NETWORK_NAME'...${NC}"

# V√©rifier si le r√©seau existe
if ${USE_SUDO}docker network inspect "$NETWORK_NAME" >/dev/null 2>&1; then
    echo -e "${YELLOW}üóëÔ∏è  Suppression du r√©seau existant '$NETWORK_NAME'...${NC}"
    
    # Arr√™ter les conteneurs kesimarket qui utilisent le r√©seau
    REXEL_CONTAINERS=$(${USE_SUDO}docker ps -q -f name=kesimarket- 2>/dev/null || true)
    if [ ! -z "$REXEL_CONTAINERS" ]; then
        echo "  Arr√™t des conteneurs kesimarket..."
        ${USE_SUDO}docker stop $REXEL_CONTAINERS || echo "  Certains conteneurs √©taient d√©j√† arr√™t√©s"
    fi
    
    if ${USE_SUDO}docker network rm "$NETWORK_NAME"; then
        echo -e "${GREEN}‚úÖ R√©seau supprim√© avec succ√®s${NC}"
    else
        echo -e "${RED}‚ùå Erreur lors de la suppression - tentative de d√©connexion forc√©e${NC}"
        ${USE_SUDO}docker network rm "$NETWORK_NAME" --force || true
    fi
else
    echo -e "${YELLOW}üìù Le r√©seau '$NETWORK_NAME' n'existe pas${NC}"
fi

echo ""
echo -e "${BLUE}üîß Cr√©ation du r√©seau '$NETWORK_NAME'...${NC}"

if ${USE_SUDO}docker network create "$NETWORK_NAME" --driver bridge; then
    echo -e "${GREEN}‚úÖ R√©seau '$NETWORK_NAME' cr√©√© avec succ√®s !${NC}"
    
    # V√©rifier la cr√©ation
    if ${USE_SUDO}docker network inspect "$NETWORK_NAME" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ V√©rification du r√©seau r√©ussie${NC}"
        ${USE_SUDO}docker network inspect "$NETWORK_NAME" --format 'Name: {{.Name}} | Driver: {{.Driver}}'
    else
        echo -e "${RED}‚ùå V√©rification du r√©seau √©chou√©e${NC}"
        exit 1
    fi
else
    echo -e "${RED}‚ùå √âchec de la cr√©ation du r√©seau${NC}"
    exit 1
fi

echo ""
echo -e "${GREEN}üéØ Nettoyage termin√© avec succ√®s !${NC}"
echo ""
echo -e "${BLUE}üìù Prochaines √©tapes:${NC}"
echo "1. Relancer le d√©ploiement backend"
echo "2. Relancer le d√©ploiement frontend"
echo "3. V√©rifier la connectivit√©"

echo "" 