#!/bin/bash

# Script de d√©pannage Docker pour KesiMarket Modern Backend
# Usage: ./fix-docker-permissions.sh

set -e

echo "üîß KesiMarket Modern - Docker Permissions Fix Script"
echo "=============================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonctions utilitaires
print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "‚ÑπÔ∏è  $1"
}

# V√©rifier si l'utilisateur est root
if [ "$EUID" -eq 0 ]; then
    print_warning "Ce script ne doit PAS √™tre ex√©cut√© en tant que root."
    print_info "Ex√©cutez-le avec votre utilisateur normal."
    exit 1
fi

echo
print_info "Utilisateur actuel: $(whoami)"
print_info "Groupes actuels: $(groups)"
echo

# 1. V√©rifier si Docker est install√©
echo "üì¶ V√©rification de l'installation Docker..."
if ! command -v docker &> /dev/null; then
    print_warning "Docker n'est pas install√©. Installation en cours..."
    
    # Installation Docker
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    rm get-docker.sh
    
    print_success "Docker install√© avec succ√®s"
else
    print_success "Docker est d√©j√† install√©: $(docker --version 2>/dev/null || echo 'Version non accessible')"
fi

# 2. V√©rifier le service Docker
echo
echo "üöÄ V√©rification du service Docker..."
if ! sudo systemctl is-active --quiet docker; then
    print_warning "Service Docker arr√™t√©. D√©marrage en cours..."
    sudo systemctl start docker
    sudo systemctl enable docker
    print_success "Service Docker d√©marr√© et activ√©"
else
    print_success "Service Docker est actif"
fi

# 3. V√©rifier le groupe docker
echo
echo "üë• V√©rification du groupe docker..."
if ! groups | grep -q '\bdocker\b'; then
    print_warning "Utilisateur pas dans le groupe docker. Ajout en cours..."
    sudo usermod -aG docker $USER
    print_success "Utilisateur ajout√© au groupe docker"
    print_warning "IMPORTANT: Vous devez vous reconnecter pour que les changements prennent effet"
    print_info "Utilisez: logout puis reconnectez-vous via SSH"
else
    print_success "Utilisateur d√©j√† dans le groupe docker"
fi

# 4. Installation Docker Compose si n√©cessaire
echo
echo "üîß V√©rification de Docker Compose..."
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null 2>&1; then
    print_warning "Docker Compose non trouv√©. Installation en cours..."
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    print_success "Docker Compose install√©"
else
    print_success "Docker Compose est disponible"
fi

# 5. Test d'acc√®s Docker
echo
echo "üß™ Test d'acc√®s Docker..."
if docker ps &> /dev/null; then
    print_success "Acc√®s Docker fonctionnel sans sudo!"
    
    # Afficher les conteneurs en cours
    echo
    print_info "Conteneurs Docker actuels:"
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    
elif sudo docker ps &> /dev/null; then
    print_warning "Docker fonctionne mais n√©cessite sudo"
    print_info "Cela peut √™tre normal si vous venez d'√™tre ajout√© au groupe docker"
    print_info "Reconnectez-vous via SSH pour activer les nouvelles permissions de groupe"
    
    echo
    print_info "Conteneurs Docker actuels (avec sudo):"
    sudo docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    
else
    print_error "Docker n'est pas accessible m√™me avec sudo"
    print_info "V√©rifiez les logs: sudo journalctl -u docker.service"
    exit 1
fi

# 6. V√©rifier les permissions du socket Docker
echo
echo "üîê V√©rification des permissions du socket Docker..."
ls -la /var/run/docker.sock
SOCKET_GROUP=$(stat -c '%G' /var/run/docker.sock)
print_info "Groupe propri√©taire du socket: $SOCKET_GROUP"

if [ "$SOCKET_GROUP" != "docker" ]; then
    print_warning "Le socket Docker n'appartient pas au groupe docker"
    print_info "Ceci peut n√©cessiter une intervention manuelle"
fi

# 7. Cr√©er un r√©seau Docker pour le projet si n√©cessaire
echo
echo "üåê V√©rification du r√©seau Docker kesimarket-network..."
if docker network ls 2>/dev/null | grep -q kesimarket-network || sudo docker network ls 2>/dev/null | grep -q kesimarket-network; then
    print_success "Le r√©seau kesimarket-network existe d√©j√†"
else
    print_info "Cr√©ation du r√©seau kesimarket-network..."
    if docker network create kesimarket-network 2>/dev/null || sudo docker network create kesimarket-network 2>/dev/null; then
        print_success "R√©seau kesimarket-network cr√©√©"
    else
        print_warning "Impossible de cr√©er le r√©seau (normal si pas de permissions)"
    fi
fi

# 8. R√©sum√© et prochaines √©tapes
echo
echo "üìã R√âSUM√â ET PROCHAINES √âTAPES"
echo "=============================="

if docker ps &> /dev/null; then
    print_success "Docker est compl√®tement fonctionnel!"
    echo
    print_info "Vous pouvez maintenant:"
    echo "  1. Relancer le workflow GitHub Actions"
    echo "  2. Ou d√©ployer manuellement avec:"
    echo "     cd ~/kesimarket-modern/backend"
    echo "     docker compose -f docker-compose.prod.yml up -d"
else
    print_warning "Docker n√©cessite encore sudo ou une reconnexion"
    echo
    print_info "Actions recommand√©es:"
    echo "  1. RECONNECTEZ-VOUS via SSH: logout puis ssh user@server"
    echo "  2. Testez √† nouveau: docker ps"
    echo "  3. Si √ßa fonctionne, relancez le deployment GitHub"
    echo
    print_info "Si le probl√®me persiste apr√®s reconnexion:"
    echo "  1. V√©rifiez: sudo journalctl -u docker.service"
    echo "  2. Red√©marrez Docker: sudo systemctl restart docker"
    echo "  3. Contactez l'administrateur syst√®me si n√©cessaire"
fi

echo
print_success "Script termin√©! üéâ" 