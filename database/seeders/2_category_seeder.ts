import { BaseSeeder } from '@adonisjs/lucid/seeders'
import Category from '#models/category'
import Product from '#models/product'
import SlugService from '#services/slug_service'

export default class CategorySeeder extends BaseSeeder {
  async run() {
    console.log('üå± Cr√©ation des cat√©gories et sous-cat√©gories...')

    // Cat√©gories principales avec leurs sous-cat√©gories
    const categoriesData = [
      {
        name: 'Fils et c√¢bles',
        description: "C√¢bles d'alimentation, domestiques et r√©seaux locaux",
        sort_order: 1,
        subcategories: [
          { name: 'C√¢bles √©lectriques', description: 'C√¢bles H07V-U, H07V-R, U-1000 R2V' },
          { name: 'C√¢bles r√©seau', description: 'C√¢bles Ethernet, FTP, STP' },
          { name: 'Fils de terre', description: 'Conducteurs de protection et mise √† la terre' },
        ],
      },
      {
        name: "Distribution et gestion de l'√©nergie",
        description: 'Solutions de distribution √©lectrique et protection',
        sort_order: 2,
        subcategories: [
          { name: 'Disjoncteurs', description: 'Disjoncteurs modulaires et industriels' },
          {
            name: 'Tableaux √©lectriques',
            description: 'Tableaux de distribution et de protection',
          },
          { name: 'Contacteurs', description: 'Contacteurs modulaires et de puissance' },
          { name: 'Relais', description: 'Relais de commande et de protection' },
        ],
      },
      {
        name: 'Chauffage √©lectrique climatisation ventilation',
        description: 'Solutions de chauffage et climatisation',
        sort_order: 3,
        subcategories: [
          { name: 'Radiateurs √©lectriques', description: 'Radiateurs √† inertie, convecteurs' },
          { name: 'Thermostats', description: 'Thermostats programmables et connect√©s' },
          { name: 'Ventilation', description: 'VMC, extracteurs, ventilateurs' },
        ],
      },
      {
        name: 'Produits industriels',
        description: '√âquipements et solutions industrielles',
        sort_order: 4,
        subcategories: [
          { name: 'Moteurs √©lectriques', description: 'Moteurs asynchrones et synchrones' },
          { name: 'Variateurs de vitesse', description: 'Variateurs √©lectroniques de puissance' },
          { name: 'Automatisme', description: 'Automates, capteurs, actionneurs' },
        ],
      },
      {
        name: '√âclairage',
        description: "Luminaires d'int√©rieur et d'ext√©rieur",
        sort_order: 5,
        subcategories: [
          { name: 'Luminaires LED', description: '√âclairage LED int√©rieur et ext√©rieur' },
          { name: 'Ampoules et sources', description: 'Ampoules LED, halog√®nes, fluocompactes' },
          { name: 'Projecteurs', description: 'Projecteurs LED et halog√®nes' },
          { name: '√âclairage d√©coratif', description: 'Guirlandes, spots encastr√©s' },
        ],
      },
      {
        name: 'Appareillage et contr√¥le du b√¢timent',
        description: "Dispositifs de contr√¥le et d'automatisation",
        sort_order: 6,
        subcategories: [
          { name: 'Prises de courant', description: 'Prises 2P+T, √©tanches, USB' },
          { name: 'Interrupteurs', description: 'Interrupteurs simples, va-et-vient, poussoirs' },
          { name: 'Variateurs', description: 'Variateurs LED, halog√®nes, universels' },
          { name: 'D√©tecteurs', description: 'D√©tecteurs de mouvement, de pr√©sence' },
        ],
      },
      {
        name: 'Conduits et cheminements',
        description: 'Chemins de c√¢bles et syst√®mes de protection',
        sort_order: 7,
        subcategories: [
          { name: 'Goulottes', description: 'Goulottes PVC, m√©talliques, adh√©sives' },
          { name: 'Tubes et conduits', description: 'Tubes IRL, ICTA, conduits √©tanches' },
          { name: 'Bo√Ætiers', description: 'Bo√Ætiers de d√©rivation, √©tanches, encastrement' },
        ],
      },
      {
        name: 'Outillage, mesure et fixation',
        description: 'Outils professionnels et √©quipements de mesure',
        sort_order: 8,
        subcategories: [
          { name: 'Outillage √©lectrique', description: 'Perceuses, visseuses, meuleuses' },
          { name: 'Instruments de mesure', description: 'Multim√®tres, pinces amp√®rem√©triques' },
          { name: 'Fixation', description: 'Chevilles, vis, colliers de serrage' },
        ],
      },
    ]

    // Cr√©er les cat√©gories principales
    const createdCategories = []
    for (const categoryData of categoriesData) {
      const slug = await SlugService.generateUniqueSlug(categoryData.name, 'categories')

      const category = await Category.firstOrCreate(
        { slug },
        {
          name: categoryData.name,
          description: categoryData.description,
          sortOrder: categoryData.sort_order,
          isActive: true,
          parentId: null,
          slug,
        }
      )

      console.log(`‚úÖ Cat√©gorie cr√©√©e: ${category.name} (${category.slug})`)

      // Cr√©er les sous-cat√©gories
      if (categoryData.subcategories) {
        for (const [index, subCategoryData] of categoryData.subcategories.entries()) {
          const subSlug = await SlugService.generateUniqueSlug(subCategoryData.name, 'categories')

          const subCategory = await Category.firstOrCreate(
            { slug: subSlug },
            {
              name: subCategoryData.name,
              description: subCategoryData.description,
              sortOrder: index + 1,
              isActive: true,
              parentId: category.id,
              slug: subSlug,
            }
          )

          console.log(`   ‚Ü≥ Sous-cat√©gorie cr√©√©e: ${subCategory.name}`)
          createdCategories.push(subCategory)
        }
      }

      createdCategories.push(category)
    }

    console.log('\nüîó Association des produits aux cat√©gories...')

    // R√©cup√©rer tous les produits existants
    const allProducts = await Product.all()
    console.log(`üì¶ ${allProducts.length} produits trouv√©s`)

    if (allProducts.length === 0) {
      console.log("‚ö†Ô∏è  Aucun produit trouv√©. Lancez d'abord le seeder des produits.")
      return
    }

    // Associer chaque cat√©gorie √† 30-50 produits al√©atoires
    for (const category of createdCategories) {
      const numberOfProducts = Math.floor(Math.random() * 21) + 30 // 30 √† 50 produits

      // S√©lectionner des produits al√©atoires
      const shuffledProducts = allProducts.sort(() => 0.5 - Math.random())
      const selectedProducts = shuffledProducts.slice(0, numberOfProducts)

      // Associer les produits √† la cat√©gorie
      const productIds = selectedProducts.map((product) => product.id)

      try {
        await category.related('products').attach(productIds)
        console.log(`‚úÖ ${category.name}: ${productIds.length} produits associ√©s`)
      } catch (error) {
        // Ignorer les erreurs de doublons (produit d√©j√† associ√©)
        console.log(`‚ö†Ô∏è  ${category.name}: Certains produits √©taient d√©j√† associ√©s`, error)
      }
    }

    console.log('\nüìä Statistiques finales:')

    // Afficher les statistiques
    for (const category of createdCategories) {
      await category.load('products')
      const productCount = category.products.length
      console.log(`   ${category.name}: ${productCount} produits`)
    }

    console.log('\nüéâ Seeder des cat√©gories termin√©!')
  }
}
