import Product from '#models/product'
import Category from '#models/category'
import Brand from '#models/brand'
import TypesenseService from '#services/typesense_service'
import { inject } from '@adonisjs/core'

/**
 * Service de synchronisation avec Typesense
 * G√®re la synchronisation automatique des mod√®les avec Typesense
 */
@inject()
export default class TypesenseSyncService {
  constructor(protected typesenseService: TypesenseService) {}

  /**
   * Synchronise un produit avec Typesense
   */
  async syncProduct(productId: number, action: 'create' | 'update' | 'delete') {
    try {
      console.log(`üîÑ Synchronisation produit ${productId} (${action})`)

      if (action === 'delete') {
        await this.typesenseService.deleteProduct(productId)
        console.log(`‚úÖ Produit ${productId} supprim√© de Typesense`)
        return
      }

      // Pour create et update, on indexe le produit
      await this.typesenseService.indexProduct(productId)
      console.log(`‚úÖ Produit ${productId} synchronis√© avec Typesense`)
    } catch (error) {
      console.error(`‚ùå Erreur synchronisation produit ${productId}:`, error)
      // Ne pas faire √©chouer l'op√©ration principale
    }
  }

  /**
   * Synchronise une cat√©gorie avec Typesense
   */
  async syncCategory(categoryId: number, action: 'create' | 'update' | 'delete') {
    try {
      console.log(`üîÑ Synchronisation cat√©gorie ${categoryId} (${action})`)

      if (action === 'delete') {
        await this.typesenseService.deleteCategory(categoryId)
        console.log(`‚úÖ Cat√©gorie ${categoryId} supprim√©e de Typesense`)
        return
      }

      // Pour create et update, on r√©cup√®re et indexe la cat√©gorie
      const category = await Category.query()
        .where('id', categoryId)
        .withCount('products')
        .preload('parent')
        .firstOrFail()

      await this.typesenseService.indexCategory(category)
      console.log(`‚úÖ Cat√©gorie ${categoryId} synchronis√©e avec Typesense`)
    } catch (error) {
      console.error(`‚ùå Erreur synchronisation cat√©gorie ${categoryId}:`, error)
      // Ne pas faire √©chouer l'op√©ration principale
    }
  }

  /**
   * Synchronise une marque avec Typesense
   */
  async syncBrand(brandId: number, action: 'create' | 'update' | 'delete') {
    try {
      console.log(`üîÑ Synchronisation marque ${brandId} (${action})`)

      if (action === 'delete') {
        await this.typesenseService.deleteBrand(brandId)
        console.log(`‚úÖ Marque ${brandId} supprim√©e de Typesense`)
        return
      }

      // Pour create et update, on r√©cup√®re et indexe la marque
      const brand = await Brand.query().where('id', brandId).withCount('products').firstOrFail()

      await this.typesenseService.indexBrand(brand)
      console.log(`‚úÖ Marque ${brandId} synchronis√©e avec Typesense`)
    } catch (error) {
      console.error(`‚ùå Erreur synchronisation marque ${brandId}:`, error)
      // Ne pas faire √©chouer l'op√©ration principale
    }
  }

  /**
   * Resynchronise tous les produits d'une cat√©gorie
   * Utile quand une cat√©gorie est modifi√©e
   */
  async resyncCategoryProducts(categoryId: number) {
    try {
      const products = await Product.query()
        .whereHas('categories', (query) => {
          query.where('categories.id', categoryId)
        })
        .select('id')

      console.log(`üîÑ Resynchronisation ${products.length} produits de la cat√©gorie ${categoryId}`)

      for (const product of products) {
        await this.syncProduct(product.id, 'update')
      }

      console.log(`‚úÖ Produits de la cat√©gorie ${categoryId} resynchronis√©s`)
    } catch (error) {
      console.error(`‚ùå Erreur resynchronisation produits cat√©gorie ${categoryId}:`, error)
    }
  }

  /**
   * Resynchronise tous les produits d'une marque
   * Utile quand une marque est modifi√©e
   */
  async resyncBrandProducts(brandId: number) {
    try {
      const products = await Product.query().where('brand_id', brandId).select('id')

      console.log(`üîÑ Resynchronisation ${products.length} produits de la marque ${brandId}`)

      for (const product of products) {
        await this.syncProduct(product.id, 'update')
      }

      console.log(`‚úÖ Produits de la marque ${brandId} resynchronis√©s`)
    } catch (error) {
      console.error(`‚ùå Erreur resynchronisation produits marque ${brandId}:`, error)
    }
  }
}
